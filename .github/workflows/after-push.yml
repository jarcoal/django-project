name: App

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]

env:
  AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
  DASHBOARD_CLIENT_ID: DASHBOARD_CLIENT_ID
  DASHBOARD_URL: DASHBOARD_URL
  DATABASE_URL: postgres://postgres@localhost/postgres
  RECAPTCHA_PRIVATE_KEY: RECAPTCHA_PRIVATE_KEY
  RECAPTCHA_PUBLIC_KEY: RECAPTCHA_PUBLIC_KEY
  REDIS_URL: redis://localhost:6379
  SECRET_KEY: SECRET_KEY

jobs:
  test:
    name: "Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:16-alpine
        env:
          # Don't require authentication
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pipenv
        run: python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev

      - name: Collecting static files
        run: pipenv run ./manage.py collectstatic --noinput

      - name: Running tests
        run: pipenv run ./manage.py test --noinput

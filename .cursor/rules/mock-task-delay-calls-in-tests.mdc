---
description: 
globs: *_tests.py
alwaysApply: false
---
# Mocking Celery Task Delay Calls

## Guidelines

1. Always mock task.delay() calls in tests
   ```python
   @patch('app.tasks.order_task.process_order.delay')
   def test_my_view(self, mock_task_delay):
       # Test code here
       mock_task_delay.assert_called_once_with(order_id=123)
   ```

2. Placement of Mock
   - Use @patch decorator at the test method level, not class level
   - Target the exact path: `app.tasks.[task_module].[task_name].delay`
   - Place mock parameters in reverse order of decorators (rightmost decorator's mock comes first in method params)

3. Verification
   - Always verify the task was queued using assert_called_once_with() or assert_called_with()
   - Check that all expected arguments were passed correctly
   - Don't set return_values for delay() mocks - tasks should be fire-and-forget

4. Common Patterns
   ```python
   # Single task call verification
   mock_task_delay.assert_called_once_with(order_id=123, notify_customer=True)

   # Multiple task calls verification
   self.assertEqual(mock_task_delay.call_count, 3)
   mock_task_delay.assert_has_calls([
       call(product_id=101, restock_quantity=10),
       call(product_id=102, restock_quantity=5),
       call(product_id=103, restock_quantity=15)
   ])

   # Verifying task was not called
   mock_task_delay.assert_not_called()
   ```

5. Don'ts ‚ùå
   - Don't mock the actual task function, only mock the delay() method
   - Don't set return values on delay() mocks unless explicitly needed by the code
   - Don't verify actual task execution in these tests - that belongs in task-specific tests

## Example Implementation

```python
from unittest.mock import patch
from django.test import TestCase

class OrderCreationViewTests(TestCase):
    @patch('app.tasks.inventory_task.update_inventory.delay')
    @patch('app.tasks.order_task.process_order.delay')
    def test_order_creation_queues_tasks(self, mock_process_order, mock_update_inventory):
        # Arrange
        order_data = {
            "customer_id": 5,
            "products": [
                {"product_id": 10, "quantity": 2},
                {"product_id": 15, "quantity": 1}
            ]
        }
        
        # Act
        response = self.client.post('/api/orders/', order_data)
        
        # Assert
        self.assertEqual(response.status_code, 201)
        order_id = response.json()['id']
        mock_process_order.assert_called_once_with(
            order_id=order_id,
            priority='normal'
        )
        mock_update_inventory.assert_called_once_with(
            product_adjustments=[
                {"product_id": 10, "quantity": -2},
                {"product_id": 15, "quantity": -1}
            ]
        )
```

## Common Gotchas

1. Import Path
   - Always use the full path: `app.tasks.[task_module].[task_name].delay`
   - Example: `app.tasks.order_task.process_order.delay`
   - Example: `app.tasks.inventory_task.update_inventory.delay`

2. Multiple Tasks
   - When mocking multiple tasks, remember decorator order matters
   - Mock parameters are provided to the test method in reverse order of decorators

3. Task Arguments
   - Always verify both positional and keyword arguments
   - For tasks with many arguments, consider using assert_called_once_with() with explicit kwarg matching
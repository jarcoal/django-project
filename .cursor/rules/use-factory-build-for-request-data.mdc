---
description: 
globs: *_tests.py
alwaysApply: false
---
# Use Factory.build() for Request Data

When testing API endpoints, use `Factory.build()` to generate request data instead of constructing data dictionaries manually.

## Do ✅

```python
from django.test import TestCase
from django.urls import reverse
from app.tests.factories import MessageFactory, ConversationFactory

class MessageAPITests(TestCase):
    def test_create_message(self):
        """Test creating a new message via the API."""
        # Setup
        conversation = ConversationFactory()
        url = reverse('message-create')
        
        # Use Factory.build() to generate a model instance
        message = MessageFactory.build(
            conversation=conversation,  # Override only what's needed for the test
            subject="Test Subject"
        )
        
        # Explicitly construct request data with only the fields we need
        message_data = {
            "message_id": message.message_id,
            "from_address": message.from_address,
            "to": message.to,
            "subject": message.subject,
            "body_plain": message.body_plain,
            "is_outbound": message.is_outbound,
            "conversation_id": conversation.id
        }
        
        # Make the request
        response = self.client.post(url, data=message_data)
        self.assertEqual(response.status_code, 201)
```

## Don't ❌

```python
from django.test import TestCase
from django.urls import reverse

class MessageAPITests(TestCase):
    def test_create_message(self):
        """Test creating a new message via the API."""
        # Bad: Manually constructing request data without a factory
        url = reverse('message-create')
        data = {
            "message_id": "test_123",
            "from_address": "test@example.com",
            "to": ["recipient@example.com"],
            "subject": "Test Subject",
            "body_plain": "Test body",
            "is_outbound": True,
            "conversation_id": self.conversation.id  # Brittle reference
        }
        response = self.client.post(url, data=data)

    def test_create_message_bad_dict(self):
        """Test creating a message - BAD: using .__dict__"""
        # Bad: Using .__dict__ which may include complex objects
        # or internal Django fields that won't serialize properly
        message = MessageFactory.build()
        response = self.client.post(url, data=message.__dict__)
```

## Guidelines

1. Use `Factory.build()` to generate model instances for test data
2. Explicitly construct request dictionaries with only the needed fields
3. Only override factory fields needed for the test case
4. Let the factory handle generating realistic default values
5. Keep tests focused on behavior rather than data setup
6. Ensures test data matches your model's expectations
7. Makes tests more maintainable as model fields change
8. Be mindful of data types that need special serialization (dates, decimals, etc.)
